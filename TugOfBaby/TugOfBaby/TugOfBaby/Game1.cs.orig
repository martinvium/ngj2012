using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;
using FarseerPhysics.Dynamics;
using FarseerPhysics.DebugViews;
using FarseerPhysics;
using FarseerPhysics.Factories;
using FarseerPhysics.Dynamics.Joints;
 

namespace TugOfBaby
{
    
    /// <summary>
    /// This is the main type for your game
    /// </summary>
    /// 
    public class Game1 : Microsoft.Xna.Framework.Game
    {
        public const int WIDTH = 1280;
        public const int HEIGHT = 720;
        public const float METER_IN_PIXEL = 64f;
        
        GraphicsDeviceManager _graphics;
        GameInstance _gameInstance;

        public Game1()
        {
            _graphics = new GraphicsDeviceManager(this);
            _graphics.PreferredBackBufferWidth = WIDTH;
            _graphics.PreferredBackBufferHeight = HEIGHT;

            Content.RootDirectory = "Content";

            _gameInstance = new GameInstance(_graphics, Content, this);
        }


        /// <summary>
        /// Allows the game to perform any initialization it needs to before starting to run.
        /// This is where it can query for any required services and load any non-graphic
        /// related content.  Calling base.Initialize will enumerate through any components
        /// and initialize them as well.
        /// </summary>
        protected override void Initialize()
        {
            _gameInstance.Initialize(GraphicsDevice);
            base.Initialize();
        }

        /// <summary>
        /// LoadContent will be called once per game and is the place to load
        /// all of your content.
        /// </summary>
        protected override void LoadContent()
        {
            _gameInstance.LoadContent();
        }

        /// <summary>
        /// UnloadContent will be called once per game and is the place to unload
        /// all content.
        /// </summary>
        protected override void UnloadContent()
        {
            // TODO: Unload any non ContentManager content here
        }

        /// <summary>
        /// Allows the game to run logic such as updating the world,
        /// checking for collisions, gathering input, and playing audio.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Update(GameTime gameTime)
        {
            if(_gameInstance.Restart) 
            {
                _gameInstance = new GameInstance(_graphics, Content, this);
                _gameInstance.Initialize(GraphicsDevice);
                _gameInstance.LoadContent();
            }

            _gameInstance.Update(gameTime);
            base.Update(gameTime);
        }

        /// <summary>
        /// This is called when the game should draw itself.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Draw(GameTime gameTime)
        {
<<<<<<< Updated upstream
            _gameInstance.Draw(gameTime);
            base.Draw(gameTime);

        }
=======
            GraphicsDevice.Clear(Color.CornflowerBlue);
            spriteBatch.Begin();
            if (up == true)
                theBackground.Update(bar++);
            if (!up)
                theBackground.Update(bar--);

            if (bar == 100)
                up = false;
            else if (bar == -100)
                up = true;

        
            
            if (_state == GameState.Menu)
            {
                _menu.Draw(spriteBatch);

            }
            else if(_state == GameState.Playing)
            {
                theBackground.Draw(spriteBatch);
                _bloodManager.Draw(spriteBatch);
                _renderManager.DrawLine(spriteBatch, 1f, Color.Black, jLeftArm.BodyA.Position * Game1.METER_IN_PIXEL, jLeftArm.BodyB.Position * Game1.METER_IN_PIXEL);
                _renderManager.DrawLine(spriteBatch, 1f, Color.Black, jRightArm.BodyA.Position * Game1.METER_IN_PIXEL, jRightArm.BodyB.Position * Game1.METER_IN_PIXEL);
                _renderManager.Draw(spriteBatch, _gameObjectManager.GetAll());
                _hud.Draw(spriteBatch, this.Window);
                _effectManager.draw(spriteBatch);
                _floatingScoreManager.Draw(spriteBatch);
            }
            else if (_state == GameState.ShowStats)
            {
                GamePad.SetVibration(PlayerIndex.One, 0, 0);
                theBackground.Draw(spriteBatch);
                if(!_baby.Enabled)
                {
                    if (_statScreen == null)
                    {
                        _statScreen = new StatScreen(GraphicsDevice, Content.Load<Texture2D>("NobodyWin"), Content);
                    }
                    _statScreen.Draw(_devil, spriteBatch, false);
                }
                if(_devil.Statistics.PointsCollected > _angel.Statistics.PointsCollected)
                {
                    if (_statScreen == null)
                    {
                        _statScreen = new StatScreen(GraphicsDevice, Content.Load<Texture2D>("devilwin"), Content);
                    }
                    _statScreen.Draw(_devil, spriteBatch, false);
                }
                else if (_devil.Statistics.PointsCollected < _angel.Statistics.PointsCollected)
                {
                    if (_statScreen == null)
                    {
                        _statScreen = new StatScreen(GraphicsDevice, Content.Load<Texture2D>("angelwin"), Content);
                    }
                    _statScreen.Draw(_angel, spriteBatch, false);
                }


            }
            else if (_state == GameState.ShowCredit)
            {
                if (_statScreen == null)
                    _statScreen = new StatScreen(GraphicsDevice, Content.Load<Texture2D>("credits"), Content);
                _statScreen.ChangeImage(Content.Load<Texture2D>("credits"));
                _statScreen.Draw(null, spriteBatch, false);
            }

            // TODO: Add your drawing code here
            // calculate the projection and view adjustments for the debug view
            Matrix projection = Matrix.CreateOrthographicOffCenter(0f, _graphics.GraphicsDevice.Viewport.Width / METER_IN_PIXEL,
                                                             _graphics.GraphicsDevice.Viewport.Height / METER_IN_PIXEL, 0f, 0f,
                                                             1f);
            Matrix view = Matrix.CreateTranslation(new Vector3((Vector2.Zero / METER_IN_PIXEL) - (_screenCenter / METER_IN_PIXEL), 0f)) * Matrix.CreateTranslation(new Vector3((_screenCenter / METER_IN_PIXEL), 0f));

            

            spriteBatch.End();

            if (_showDebug)
                _debugView.RenderDebugData(ref projection, ref view);
            
            base.Draw(gameTime);

        }

        public void reaperUpdate(GameTime _gameTime)
            {
                if (almostDeadlock)
                    GamePad.SetVibration(PlayerIndex.One, 0.15f, 0.15f);
                else if(!grimReaper)
                    GamePad.SetVibration(PlayerIndex.One, 0.0f, 0.0f);

                Console.WriteLine(_reaper.Position);
                if (!grimReaper){
                    _reaper.Enabled = false;
                _reaper.Position = new Vector2(0.15f, 0.09f);
                }

                if (grimReaper)
                {

                    if(!_reaper.Enabled)
                        _effectManager.AddDeathSpawnEffect(_reaper.Body.Position * Game1.METER_IN_PIXEL);
                    _reaper.Enabled = true;
                    
                    reaperMove();
                    tenSecondTimer += (float)_gameTime.ElapsedGameTime.TotalSeconds;
                }

                threeSecondTimer += (float)_gameTime.ElapsedGameTime.TotalSeconds;


                if (tenSecondTimer > 10)
                {
                    if (grimReaper)
                        _effectManager.AddDeathDespawnEffect(_reaper.Body.Position * Game1.METER_IN_PIXEL);
                    grimReaper = false;
                    tenSecondTimer = 0;
                }

                if (threeSecondTimer > 3 && !grimReaper)
                    deadLock();
            }

        public void reaperMove()
        {
            babyDir = new Vector2();

            babyDir = (_baby.Position - _reaper.Position);

            _reaper.Body.ApplyLinearImpulse(babyDir * 0.005f);

            //Console.WriteLine(Vector2.Distance(_baby.Position, _reaper.Position));
            
            if(Vector2.Distance(_baby.Position, _reaper.Position) < 300)
                GamePad.SetVibration(PlayerIndex.One, 0.25f, 0.25f);

            if (Vector2.Distance(_baby.Position, _reaper.Position) < 200)
                GamePad.SetVibration(PlayerIndex.One, 0.5f, 0.5f);

            if (Vector2.Distance(_baby.Position, _reaper.Position) < 100)
                GamePad.SetVibration(PlayerIndex.One, 1, 1);
            
        }
        
        public void deadLock()
            {

                
          
                
            if (_baby.Body.LinearVelocity.X > -1.0f && _baby.Body.LinearVelocity.Y > -1.0f)
                    {
                        if (_baby.Body.LinearVelocity.X < 1.0f && _baby.Body.LinearVelocity.Y < 1.0f)
                            if (almostDeadlock)
                            {
                                Console.WriteLine("O HAI REAPER");
                                almostDeadlock = false;
                                grimReaper = true;
                            }
                            else
                            {
                                Console.WriteLine("Doorbell");
                                almostDeadlock = true;
                            }
                        else
                            almostDeadlock = false;
                    }
                else
                    {
                    almostDeadlock = false;
                    }

                threeSecondTimer = 0;

            }
        
        #region Properties
        public GameState State
        {
            get { return _state; }
            set { _state = value; }
        }
        #endregion
    }

    public enum GameState
    {
        Menu,
        Playing,
        ShowStats,
        ShowCredit
>>>>>>> Stashed changes
    }
}
